name: Security Analysis

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install -DskipTests
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
            -Dsonar.sources=.
            -Dsonar.language=java
            -Dsonar.java.binaries=.
            -Dsonar.exclusions=**/test/**
            -Dsonar.qualitygate.wait=true
          
      - name: Generate Sonar Report
        run: | 
          RESULT=curl -u ${{ secrets.SONAR_TOKEN }}: \
            -X GET "https://sonarcloud.io/api/measures/component?componentKey=${{ secrets.SONAR_PROJECT }}&metricKeys=coverage" \
            -o sonar-report.json

      - name: Check for Sonar Blocker issues
        run: |
          sleep 5  # Wait for SonarCloud to process
          blockers=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
            "https://sonarcloud.io/api/issues/search?componentKeys=${{ secrets.SONAR_PROJECT }}&severities=BLOCKER&resolved=false" \
            | jq '.paging.total' )
          
          # If there are any blocker issues, fail the build
          if [ "$blockers" -gt 0 ]; then
            echo "Pipeline failed due to blocker issues."
            exit 1
          fi

      - name: Upload Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sonar-analysis-report
          path: sonar-report.json

# name: Security Analysis

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout Code
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Setup JDK
#       - name: Set up JDK
#         uses: actions/setup-java@v4
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       - name: Build with Maven
#         run: mvn clean install -DskipTests
      
      
#       # SonarQube Analysis
#       - name: SonarCloud Scan
#         uses: SonarSource/sonarcloud-github-action@master
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         with:
#           args: >
#             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
#             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
#             -Dsonar.sources=frontend-maven-plugin/src/main,frontend-plugin-core/src/main
#             -Dsonar.exclusions=**/test/**

# 5646
      # - name: Generate SonarQube Report
      #   if: alwaysfs()
      #   run: |
      #     echo "# SonarQube Analysis Report" > sonar-report.md
      #     echo "## Analysis Status: ${{ steps.sonar-status.outputs.status }}" >> sonar-report.md
      #     echo "Analysis completed at: $(date)" >> sonar-report.md
      #     if [ "${{ steps.sonar-status.outputs.status }}" = "ERROR" ]; then
      #       echo "Critical issues found - Pipeline stopped" >> sonar-report.md
      #     else
      #       echo "No critical issues found" >> sonar-report.md
      #     fi

      # - name: Upload SonarQube Report
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sonar-report
      #     path: sonar-report.md

  # build:
  #   runs-on: ubuntu-latest
  #   env:
  #     APP_NAME: frontend-maven-plugin
  #     VERSION: ${{ github.sha }}
  #   steps:
  #     - uses: actions/checkout@v4

  #     # Login to Docker Hub (required for Docker Scout)
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     # Build Docker image
  #     - name: Build Docker image
  #       run: |
  #         docker build -t ${{ env.APP_NAME }}:${{ env.VERSION }} .
  #         docker tag ${{ env.APP_NAME }}:${{ env.VERSION }} ${{ env.APP_NAME }}:latest




  #     # Install Docker Scout CLI
  #     - name: Install Docker Scout
  #       run: |
  #         curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --

  #     # Run Docker Scout security scanning
  #     - name: Docker Scout Scanning
  #       env:
  #         DOCKER_SCOUT_HUB_USER: ${{ secrets.DOCKER_USERNAME }}
  #       run: |
  #         docker scout cves ${{ env.APP_NAME }}:${{ env.VERSION }} --output ./vulns.report
  #         docker scout cves ${{ env.APP_NAME }}:${{ env.VERSION }} --only-severity critical --exit-code
  #         docker scout sbom --output ${{ env.APP_NAME }}.sbom ${{ env.APP_NAME }}:${{ env.VERSION }}

      # # Upload reports as artifacts
      # - name: Upload Security Reports
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: security-reports
      #     path: |
      #       ./vulns.report
      #       ./${{ env.APP_NAME }}.sbom
      # dd